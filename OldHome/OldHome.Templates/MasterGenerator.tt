<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="EntityAnalyzer.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".txt" #>
<#
    // 设置实体文件夹路径
    var entitiesPath = Host.ResolvePath("..\\OldHome.Entities");
    var outputPath = Host.ResolvePath("..\\OldHome.DTO\\Generated");
    
    // 确保输出目录存在
    if (!Directory.Exists(outputPath))
    {
        Directory.CreateDirectory(outputPath);
    }
    
    var entityFiles = Directory.GetFiles(entitiesPath, "*.cs", SearchOption.AllDirectories)
        .Where(f => !f.Contains("Base\\") && !f.Contains("\\bin\\") && !f.Contains("\\obj\\"))
        .ToList();
    
    var generatedFiles = new List<string>();
#>
=== OldHome DTO 批量生成报告 ===
生成时间: <#= DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") #>

<# foreach(var entityFile in entityFiles) { #>
<#
    try
    {
        var entity = ParseEntity(entityFile);
        if (entity != null && !string.IsNullOrEmpty(entity.Name))
        {
            var outputFile = Path.Combine(outputPath, entity.Name + ".cs");
            
            // 这里应该调用DTOGenerator.tt模板，由于T4限制，我们输出生成指令
            generatedFiles.Add($"{entity.Name}.cs");
#>
处理实体: <#= entity.Name #>
- 基类: <#= entity.BaseClass ?? "无" #>
- 属性数量: <#= entity.Properties.Count #>
- 输出文件: <#= entity.Name #>.cs
- 状态: ✓ 成功

<#
        }
    }
    catch (Exception ex)
    {
#>
处理实体失败: <#= Path.GetFileNameWithoutExtension(entityFile) #>
- 错误: <#= ex.Message #>
- 状态: ✗ 失败

<#
    }
} #>

=== 生成摘要 ===
总计处理: <#= entityFiles.Count #> 个实体文件
成功生成: <#= generatedFiles.Count #> 个DTO文件

生成的DTO文件列表:
<# foreach(var file in generatedFiles) { #>
- <#= file #>
<# } #>

=== 使用说明 ===
1. 将生成的文件复制到 OldHome.DTO 项目
2. 检查命名空间是否正确
3. 根据需要调整属性映射
4. 添加必要的验证特性

=== 后续步骤 ===
1. 创建 AutoMapper 配置
2. 生成对应的 Controller
3. 生成对应的 Service 接口
4. 生成对应的 View 模板