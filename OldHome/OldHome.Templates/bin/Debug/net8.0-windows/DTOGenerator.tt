<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="EntityAnalyzer.tt" #>
<#@ parameter name="EntityPath" type="System.String" #>
<#@ output extension=".cs" #>
<#
    var entity = ParseEntity(EntityPath);
    var entityName = entity.Name;
    var dtoNamespace = entity.Namespace.Replace(".Entities", ".DTO");
#>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using OldHome.Core;
using OldHome.DTO.Base;

namespace <#= dtoNamespace #>
{
    #region <#= entityName #>Dto (查询用)
    public class <#= entityName #>Dto : <#= GetBaseDtoClass(entity) #>
    {
<# foreach(var prop in entity.Properties.Where(p => p.ShouldIncludeInDto)) { #>
<# if(prop.Attributes.Contains("Display")) { #>
        [Display(Name = "<#= GetDisplayName(prop.Name) #>")]
<# } #>
        public <#= GetDtoTypeName(entityName, prop) #> <#= prop.Name #> { get; set; }<#= GetDefaultValue(prop, true) #>
<# if(IsNavigationIdProperty(prop)) { #>
        public string <#= GetNavigationPropertyName(prop) #> { get; set; } = string.Empty;
<# } #>

<# } #>
    }
    #endregion

    #region <#= entityName #>Create (新增用)
    public class <#= entityName #>Create : <#= GetBaseDtoClass(entity) #>
    {
<# foreach(var prop in entity.Properties.Where(p => p.ShouldIncludeInCreate)) { #>
<# if(prop.Attributes.Contains("Display")) { #>
        [Display(Name = "<#= GetDisplayName(prop.Name) #>")]
<# } #>
<# if(prop.Attributes.Contains("Required")) { #>
        [Required(ErrorMessage = "<#= GetDisplayName(prop.Name) #>不能为空")]
<# } #>
        public <#= prop.RawType #> <#= prop.Name #> { get; set; }<#= GetDefaultValue(prop, false) #>

<# } #>
    }
    #endregion

    #region <#= entityName #>Modify (修改用)
    public class <#= entityName #>Modify : <#= GetBaseDtoClass(entity) #>
    {
<# foreach(var prop in entity.Properties.Where(p => p.ShouldIncludeInModify)) { #>
<# if(prop.Attributes.Contains("Display")) { #>
        [Display(Name = "<#= GetDisplayName(prop.Name) #>")]
<# } #>
<# if(prop.Attributes.Contains("Required")) { #>
        [Required(ErrorMessage = "<#= GetDisplayName(prop.Name) #>不能为空")]
<# } #>
        public <#= prop.RawType #> <#= prop.Name #> { get; set; }<#= GetDefaultValue(prop, false) #>

<# } #>
    }
    #endregion

    #region <#= entityName #>Sample (简单信息用)
    public class <#= entityName #>Sample : <#= GetBaseDtoClass(entity) #>
    {
<# foreach(var prop in entity.Properties.Where(p => p.ShouldIncludeInSample)) { #>
        public <#= prop.RawType #> <#= prop.Name #> { get; set; }<#= GetDefaultValue(prop, false) #>
<# } #>
    }
    #endregion
}

<#+
private string GetBaseDtoClass(EntityInfo entity)
{
    if (entity.HasOrgBy)
        return "BaseOrgByDto";
    if (entity.HasBaseEntity)
        return "BaseDto";
    return "object";
}

private string GetDisplayName(string propertyName)
{
    // 自动生成中文显示名
    switch (propertyName)
    {
        case "Name": return "名称";
        case "Description": return "描述";
        case "Address": return "地址";
        case "PhoneNumber": case "PhoneNum": return "电话号码";
        case "Gender": return "性别";
        case "BirthDate": return "出生日期";
        case "HireDate": return "入职日期";
        case "CreatedAt": return "创建时间";
        case "UpdatedAt": return "更新时间";
        case "IsDeleted": return "是否删除";
        case "RoomNumber": return "房间号";
        case "BedNum": return "床位号";
        case "Code": return "编号";
        case "Status": return "状态";
        case "Floor": return "楼层";
        case "Notes": return "备注";
        case "AdmissionDate": return "入住日期";
        case "HealthStatus": return "健康状态";
        case "HealthDescription": return "健康描述";
        case "IdCardNumber": return "身份证号";
        case "Specification": return "规格";
        case "Manufacturer": return "生产厂家";
        case "StorageMethod": return "存储方式";
        case "Barcode": return "条形码";
        case "ExpirationDate": return "有效期";
        case "BatchNumber": return "批次号";
        case "Salary": return "薪资";
        case "Position": return "职位";
        case "DepartmentId": return "部门";
        default: return propertyName;
    }
}

private string GetDefaultValue(PropertyInfo prop, bool isDto)
{
    if (string.IsNullOrEmpty(prop.DefaultValue))
        return "";
        
    if (isDto && prop.IsNavigation && !prop.Name.EndsWith("Id"))
        return "";
        
    return $" = {prop.DefaultValue}";
}

private bool IsNavigationIdProperty(PropertyInfo prop)
{
    return prop.Name.EndsWith("Id") && 
           !prop.Name.Equals("Id", StringComparison.OrdinalIgnoreCase);
}

private string GetNavigationPropertyName(PropertyInfo prop)
{
    if (prop.Name.EndsWith("Id"))
    {
        var baseName = prop.Name.Substring(0, prop.Name.Length - 2);
        return baseName + "Name";
    }
    return prop.Name + "Name";
}
#>