@namespace OldHome.Wasm.Pages.Organization
@page "/organization/orglist"
@using AntDesign.TableModels
@inherits BaseListComponent<OrgDto>
@attribute [Navigation("orgList", "/organization/orglist", "机构管理", "组织管理", Icon = "bank")]
@inject ModalService ModalService
@inject ConfirmService ComfirmService

<div>
    <GridRow>
        <GridCol Span="24">
            <Table @ref="_table" DataSource="@_items" Loading="_loading" TItem="OrgDto" OnChange="HandleTableChange" HidePagination>
                <TitleTemplate>
                    <GridRow>
                        <GridCol Span="1" Offset="23">
                            <Button Type="ButtonType.Primary" OnClick="() => StartEdit(default)">新增</Button>
                        </GridCol>
                    </GridRow>
                </TitleTemplate>
                <ColumnDefinitions Context="row">
                    <GenerateColumns Definitions="definitions" HideColumnsByName="@(new []{"OrgAreas","Id","IsDeleted"})" />
                    <ActionColumn>
                        <a @onclick=" ()=>
                        StartEdit(row)">编辑</a>
                        <Popconfirm Title="@("是否要删除【"+row.Name+"】?")" OnConfirm="()=>Delete(row)">
                            <a>删除</a>
                        </Popconfirm>
                    </ActionColumn>
                </ColumnDefinitions>
            </Table>
        </GridCol>
    </GridRow>
</div>

@code {
    protected override Func<Task<BaseResponse<List<OrgDto>>>> GetAllFunc => async () => await ApiManager.OrgApi.GetAllOrgs();
    protected override Func<int, Task<BaseResponse>> DeleteFunc => async (id) => await ApiManager.OrgApi.DeleteOrg(id);
    protected override string Title => "机构";
    protected override async Task<BaseResponse> Modify(OrgDto data)
    {
        return await ApiManager.OrgApi.ModifyOrg(new OrgModify
                {
                    Id = data.Id,
                    Name = data.Name,
                    Address = data.Address,
                    PhoneNum = data.PhoneNum
                });
    }
    protected override RenderFragment GetModalContent(IForm form, OrgDto? data, ModalRef<bool> modalRef)
    {
        RenderFragment render =
    @<Form @ref="form" Model="data" OnFinish="()=> modalRef.OkAsync(true)" LabelColSpan="6" WrapperColSpan="18">
        <FormItem><Input @bind-Value="@data.Name" /></FormItem>
        <FormItem><Input @bind-Value="@data.PhoneNum" /></FormItem>
        <FormItem><TextArea @bind-Value="@data.Address" /></FormItem>
        @if(data.Id>0)
    {
        <FormItem Label="总公司"><Switch @bind-Checked="@data.IsHead" Disabled=true /></FormItem>
    }
    </Form>
        ;
        return render;
    }

    protected override async Task<BaseResponse<OrgDto>> Create(OrgDto data)
    {
        return await ApiManager.OrgApi.CreateOrg(new OrgCreate
                {
                    Name = data.Name,
                    Address = data.Address,
                    PhoneNum = data.PhoneNum
                });

    }

    private void definitions(string propertyName, IFieldColumn column)
    {
        if (propertyName.Equals("IsHead"))
        {
            var tagCol = (Column<bool>)column;
            tagCol.CellRender = cellData => @<span>@(cellData.FieldValue ? "是" : "否")</span>;
            return;
        }
        column.Sortable = true;
        column.Filterable = true;
    }
}
